{
	"name": "df_demo_lookup_derived_columns",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "df_ds_employee_csv",
						"type": "DatasetReference"
					},
					"name": "srcsource"
				},
				{
					"dataset": {
						"referenceName": "ds_azure_dept",
						"type": "DatasetReference"
					},
					"name": "srcDept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adl_out",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Emp_id as short,",
				"          Name as string,",
				"          Gender as string,",
				"          Salary as integer,",
				"          Dept_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> srcsource",
				"source(output(",
				"          Dept_id as integer,",
				"          Dept_Name as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcDept",
				"srcsource, srcDept lookup(srcsource@Dept_id == srcDept@Dept_id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 derive(Salary_USD = divide(Salary, 80),",
				"          Dept_Name_new = iif(isNull(Dept_Name), 'Missing', Dept_Name),",
				"          Name = concat(Gender, '_',Name)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Emp_id as string,",
				"          Name as string,",
				"          Gender as string,",
				"          Salary as string,",
				"          Dept_id as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}